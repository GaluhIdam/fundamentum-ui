@use "../variables/typography_variable";
@use "../variables/font_weight_variable";
@use "../variables/color_variable";

// stylelint-disable property-no-vendor-prefix
// stylelint-disable declaration-no-important

@function fontSizeToRemOrEm($size, $sizingMethod: 'rem') {
  @if ($sizingMethod == 'rem') {
    @return #{$size / typography_variable.$fuiFontSize}rem;
  } @else if ($sizingMethod == 'em') {
    @return #{$size / typography_variable.$fuiFontSize}em;
  }
}

// It can also be applied to calculate paddings
@function marginToRemOrEm($elementSize, $elementFontSize, $sizingMethod: 'rem') {
  @if ($sizingMethod == 'rem') {
    @return #{$elementSize / typography_variable.$fuiFontSize}rem;
  } @else if ($sizingMethod == 'em') {
    @return #{$elementSize / $elementFontSize}em;
  }
}

// Spit out rem and px
@mixin fontSize($size: typography_variable.$fuiFontSize, $sizingMethod: 'rem') {
  @if ($sizingMethod == 'rem') {
    font-size: fontSizeToRemOrEm($size, 'rem');
  } @else if ($sizingMethod == 'em') {
    font-size: fontSizeToRemOrEm($size, 'em');
  }
}

@mixin lineHeightFromBaseline($multiplier: 3) {
  line-height: typography_variable.lineHeightFromBaseline($multiplier);
}

// Some mixins that help us deal with browser scaling of text more consistently.
// Essentially, fonts across fui should scale against the root html element, not
// against parent inheritance.

// Our base fonts

@mixin fuiFont {
  font-family: typography_variable.$fuiFontFamily;
  font-weight: font_weight_variable.$fuiFontWeightRegular;
  letter-spacing: -.005em;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  font-kerning: normal;
}

@mixin fuiCodeFont {
  font-family: typography_variable.$fuiCodeFontFamily;
  letter-spacing: normal;
}

@mixin fuiText {
  color: color_variable.$fuiTextColor;
  font-weight: font_weight_variable.$fuiFontWeightRegular;
}

@mixin fuiTitle($size: 'm') {
  @include fuiTextBreakWord;
  color: color_variable.$fuiTitleColor;

  @if (map-has-key(typography_variable.$fuiTitles, $size)) {
    @each $property, $value in map-get(typography_variable.$fuiTitles, $size) {
      @if ($property == 'font-size') {
        @include fontSize($value);
      } @else {
        #{$property}: $value;
      }
    }
  } @else {
    @include fontSize($size);
    @include lineHeightFromBaseline(3);
  }
}

// Font sizing extends, using rem mixin

@mixin fuiFontSizeXS {
  @include fontSize(typography_variable.$fuiFontSizeXS);
  line-height: typography_variable.$fuiLineHeight;
}

@mixin fuiFontSizeS {
  @include fontSize(typography_variable.$fuiFontSizeS);
  line-height: typography_variable.$fuiLineHeight;
}

@mixin fuiFontSize {
  @include fontSize(typography_variable.$fuiFontSize);
  line-height: typography_variable.$fuiLineHeight;
}

@mixin fuiFontSizeM {
  @include fontSize(typography_variable.$fuiFontSizeM);
  line-height: typography_variable.$fuiLineHeight;
}

@mixin fuiFontSizeL {
  @include fontSize(typography_variable.$fuiFontSizeL);
  line-height: typography_variable.$fuiLineHeight;
}

@mixin fuiFontSizeXL {
  @each $property, $value in map-get(typography_variable.$fuiTitles, 'm') {
    @if ($property == 'font-size') {
      @include fontSize($value);
    } @else {
      #{$property}: $value;
    }
  }
  line-height: 1.25;
}

@mixin fuiFontSizeXXL {
  @each $property, $value in map-get(typography_variable.$fuiTitles, 'l') {
    @if ($property == 'font-size') {
      @include fontSize($value);
    } @else {
      #{$property}: $value;
    }
  }
  line-height: 1.25;
}

@mixin fuiTextBreakWord {
  // https://css-tricks.com/snippets/css/prevent-long-urls-from-breaking-out-of-container/
  overflow-wrap: break-word !important; // makes sure the long string will wrap and not bust out of the container
  word-break: break-word;
}

/**
 * Text truncation
 *
 * Prevent text from wrapping onto multiple lines, and truncate with an ellipsis.
 *
 * 1. Ensure that the node has a maximum width after which truncation can occur.
 */
@mixin fuiTextTruncate {
  max-width: 100%; // 1
  overflow: hidden !important;
  text-overflow: ellipsis !important;
  white-space: nowrap !important;
}

@mixin fuiNumberFormat {
  font-feature-settings: typography_variable.$fuiFontFeatureSettings, 'tnum' 1; // Fixed-width numbers for tabular data
}

/**
 * Text weight shifting
 *
 * When changing the font-weight based the state of the component
 * this mixin will ensure that the sizing is dependent on the boldest
 * weight so it doesn't shifter sibling content.
 */
@mixin fuiTextShift($fontWeight: font_weight_variable.$fuiFontWeightBold, $attr: 'data-text') {
  &::after {
    display: block;
    content: attr(#{$attr});
    font-weight: $fontWeight;
    height: 0;
    overflow: hidden;
    visibility: hidden;
  }
}
